# SOLID 원칙

객체 지향 프로그래밍(Object Oriented Programming) 5대 원칙이란, 

**SRP(단일 책임 원칙), OCP(개방-폐쇄 원칙), LSP(리스코프 치환 원칙), DIP(의존 역전 원칙), ISP(인터페이스 분리 원칙)**을 말하며 앞 자를 따서 SOLID 원칙이라고 부른다.



### SRP(Single Responsiblity Principle, 단일 책임 원칙)

소프트웨어의 설계 부품(클래스, 함수 등)은 단 하나의 책임만을 가져야 한다.

여기서 책임이란 '기능' 정도로 해석하여도 된다. 

설계를 잘한 프로그램은 기본적으로 새로운 요구사항과 프로그램 변경에 영향을 받는 부분이 적다. 다시말해서, 응집도는 높고 결합도는 낮은 프로그램이다.

만약 한 클래스가 수행할 수 있는 기능이 많아지면 클래스 내부의 함수끼리 강한 결합이 발생할 가능성이 높아진다.

이는 유지보수 비용이 증가하므로 책임을 분리시킬 필요가 있다.



### OCP(Open-Closed Principle, 개방-폐쇄 원칙)

기존의 코드를 변경하지 않고(Closed) 기능을 수정하거나 추가할 수 있도록(Open) 설계해야 한다.

OCP에 만족하는 설계를 할 때 변경되는 것이 무엇인지에 초점을 맞춘다. 

자주 변경되는 내용은 수정하기 쉽게 설계하고, 변경되지 않아야 하는 것은 수정되는 내용에 영향을 받지 않도록 하는 것이 중요하다.

이를 위해 자주 사용되는 문법이 인터페이스(Interface)이다.

아래의 코드를 보자. SoundPlayer는 음악을 재생해주는 클래스이다. 이 클래스는 기본적으로 wav파일을 재생할 수 있다. 

하지만, SOundPlayer가 다른 포맷의 파일을 재생하도록 요구사항이 변경되면, play() 메소드를 수정하여야 한다.

이러한 소스코드 변경은 OCP 원칙에 위배된다.

![img](https://t1.daumcdn.net/cfile/tistory/243BF34C566EBFC124)

위의 코드를 OCP를 만족시키도록 변경해보자.

변해야하는 것은 play() 메소드이다. 따라서, play() 메소드를 인터페이스로 분리한다.

그 다음, 재생하고자 하는 파일 클래스(Wav, Mp3)를 만들어 PlayAlgorithm 인터페이스의 play() 메소드를 재정의하도록 설계한다.

![img](https://t1.daumcdn.net/cfile/tistory/2603C233566EC75321)



SoundPlayer 클래스에서는 playAlgorithm 인터페이스를 멤버 변수로 만든다.

그 후, setFile 메소드를 통해 원하는 포맷의 클래스를 해당 변수에 넣는다.

SoundPlayer의 play() 메소드는 인터페이스를 상속받아 구현된 클래스의 play() 메소드를 실행시키게한다.

이제, main 메소드에서 setFile 메소드를 통해, play 하고자 하는 파일의 객체를 지정한다.

![img](https://t1.daumcdn.net/cfile/tistory/2316E636566EC7AA0A)

### LSP(Liskov Substitution Principle, 리스코프 치환 원칙)

자식 클래스는 부모클래스에서 가능한 행위를 수행할 수 있어야 한다.

리스코프 치환 원칙은 MIT 컴퓨터 사이언스 교수인 리스코프가 제안하였다.

부모와 자식 클래스 사이의 행위에 일관성이 있어야 하고, 객체 지향 프로그래밍에서 부모 클래스의 인스턴스 대신 자식 크래스의 인스턴스를 사용해도 문제가 없어야 한다는 것을 의미한다.

따라서, 리스코프 치환 원칙은 상속 관계에서 일반화 관계(일관성이 있다)가 성립해야 한다는 것이다.

예를 들어, 사각형 클래스가 도형 클래스의 상속을 받는다고 하자.

- 도형은 둘레를 가지고 있다.

- 도형은 넓이를 가지고 있다.

- 도형은 각을 가지고 있다.



일반화 관계를 확인하는 방법은 단어를 교체해 보면 알 수 있다.

도형이란 단어 대신 사각형을 넣어보자.

- 사각형은 둘레를 가지고 있다.

- 사각형은 넓이를 가지고 있다.

- 사각형은 각을 가지고 있다.



여기서 원(Circle) 이라는 도형에 대해 생각해보자.

원 클래스 역시 도형 클래스의 상속을 받는다고 가정하자. 

도형 단어 대신 원을 대입해보자.

- 원은 둘레를 가지고 있다.

- 원은 넓이를 가지고 있다.

- 원은 각을 가지고 있다.



문장을 읽어보면 세번째 문장이 어색하다는 것을 알 수 있다.

따라서 도형 클래스는 LSP을 만족하지 않은 설계라 할 수 있다.

따라서 세번째 문장에 대해서는 일반화 관계가 성립하도록 수정되어야 한다.



### DIP(Dependency Inversion Principle, 의존 역전 원칙)

의존 관계를 맺을 때, 변화하기 쉬운 것 보단 변화하기 어려운 것에 의존해야 한다.

변화하기 쉬운 것이란 구체적인 것을 말하고, 변화하기 어려운 것이란 추상적인 것을 말한다. 

객체지향 관점에서는 변화하기 쉬운 것이란 구체화 된 클래스를 의미하고, 변화하기 어려운 것은 추상클래스나 인터페이스를 의미한다. 

따라서, DIP를 만족한다는 것은 의존관계를 맺을 때 구체적인 클래스보다 인터페이스나 추상 클래스와 관계를 맺는다는 것을 의미한다.

DIP를 만족하면 '의존성 주입'이라는 기술로 변화에 유연한 설계를 할 수 있다.

위에서 보았던 예제에서 setFile 메소드를 통해 실행하고자 하는 파일을 쉽게 바꿀 수 있다.

마찬가지로, 새로운 파일 포맷(Mp4)을 실행하고자 한다면, 새로운 클래스(Mp4)를 만든 후 play 인터페이스를 상속받아 구현한다.

그 후, main 메소드에서 setFile 메소드를 이용하여 file 멤버 변수에 Mp4 객체를 주입시키면 된다. 이와 같은 기술을 의존성 주입이라 한다.

![img](https://t1.daumcdn.net/cfile/tistory/23073A3F566ED43321)

### ISP(Interface Segregation Principle, 인터페이스 분리 원칙)

한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다. 

하나의 일반적인 인터페이스 보다는 여러 개의 구체적인 인터페이스가 좋다.

다시 말해서, 자신이 사용하지 않는 기능(인터페이스)에는 영향을 받지 말아야 한다는 의미이다.

예를 들어서, 스마트폰으로 전화, 웹서핑, 사진 촬영 등 기능을 사용한다.

하지만, 전화를 할 때 웹서핑, 사진촬영 등의 다른 기능은 사용하지 않는다.

따라서, 각각의 기능은 독립된 인터페이스로 구현하여 서로에게 영향을 받지 않도록 설계해야한다.

이렇게 설계된 소프트웨어는 인터페이스 분리 원칙을 통해 시스템 내부 의존성을 약화시켜 수정, 재배포를 쉽게 할 수 있다.





